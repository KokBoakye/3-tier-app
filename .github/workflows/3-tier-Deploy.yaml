name: Provision AWS && Deploy App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SSH_USER: ubuntu                           # Change to ec2-user if Amazon Linux
      SSH_KEY: ${{ secrets.EC2_SSH_KEY }}        # PEM file content as GitHub Secret

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 3Ô∏è‚É£ Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 4Ô∏è‚É£ Terraform Destroy (optional cleanup before redeploy)
      - name: Terraform Destroy (cleanup)
        run: terraform destroy -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 5Ô∏è‚É£ Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 6Ô∏è‚É£ Get Terraform outputs (EC2 IPs)
      - name: Get Terraform Outputs
        id: tfoutputs
        run: |
          BACKEND_IP=$(terraform output -raw backend_public_ip)
          FRONTEND_IP=$(terraform output -raw frontend_public_ip)
          echo "BACKEND_IP=$BACKEND_IP" >> $GITHUB_ENV
          echo "FRONTEND_IP=$FRONTEND_IP" >> $GITHUB_ENV
        working-directory: ./terraform

      # 7Ô∏è‚É£ Build Backend
      - name: Build Backend
        working-directory: ./src/backend
        run: |
          npm install
          npm run build || echo "No backend build step"

      # 8Ô∏è‚É£ Build Frontend
      - name: Build Frontend
        working-directory: ./src/frontend
        run: |
          npm install
          npm run build || echo "No frontend build step"

      # 9Ô∏è‚É£ Setup SSH key for deployment
      - name: Setup SSH key
        run: |
          echo "$SSH_KEY" > private_key.pem
          chmod 600 private_key.pem

      # üîü Deploy Backend to EC2
      - name: Deploy Backend
        run: |
          scp -o StrictHostKeyChecking=no -i private_key.pem -r ./src/backend/* $SSH_USER@$BACKEND_IP:/home/$SSH_USER/backend
          ssh -o StrictHostKeyChecking=no -i private_key.pem $SSH_USER@$BACKEND_IP "cd backend && npm install --production && pm2 restart all || pm2 start app.js"

      # 1Ô∏è‚É£1Ô∏è‚É£ Deploy Frontend to EC2
      - name: Deploy Frontend
        run: |
          scp -o StrictHostKeyChecking=no -i private_key.pem -r ./src/frontend/build/* $SSH_USER@$FRONTEND_IP:/var/www/html/
          ssh -o StrictHostKeyChecking=no -i private_key.pem $SSH_USER@$FRONTEND_IP "sudo systemctl restart nginx"
